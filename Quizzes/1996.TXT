   3. Ланцюгові дроби.
   Записом (X1,X2,...,Xn) позначимо дійсне число, представлене у вигляді
скінченого ланцюгового дробу:
                              1
              X1 + ────────────────────────
                                 1
                   X2 + ───────────────────
                                    1                     
                        X3 + ──────────────
                                        1
                             ...Xn-1 + ────
                                        Xn
  
де X1,...,Xn - додатні цілі числа. Записом (X1,X2,...,Xn[Y1,Y2,...,Yn)
позначимо число 
                                          1
            X1 + ─────────────────────────────────────────────────────
                                             1
                 X2 + ────────────────────────────────────────────────
                                                1      
                      ...Xn + ────────────────────────────────────────
                                                   1
                              Y1 + ───────────────────────────────────
                                                      1
                                   Y2 + ──────────────────────────────
                                                          1 
                                        ...Yk + ──────────────────────
                                                             1
                                                Y1 + ─────────────────
                                                               1
                                                     Y2 + ────────────
                                                          ... Yk + ...


де X1, ..., Xn, Y1, ..., Yk - додатні цілі числа, причому Xn<>Yk.
Це є нескінчений періодичний ланцюговий дріб. Мінімальну скінчену
послідовність, що повторюється Y1, Y2, ..., Yk, будемо називати
періодом дробу.
   Відомо, що квадратний корінь довільного натурального числа можна
однозначно подати у вигляді скінченого ланцюгового дробу або нескінченого
періодичного ланцюгового дробу. Наприклад, sqrt(36)=(6); sqrt(7)=(2[,1,1,1,4]).
   Завдання. Написати програму, яка для заданого числа М знаходить подання
sqrt(M) у вигляді ланцюгового дробу (скінченого або нескінченого періодичного).
   Вхідні дані. Вхідний файл CHAIN.DAT в першому рядку містить L-кількість
тестів; в другому - перший тест, тощо. Тест - це додатнє ціле число
від 1 до 100.
   Вихідні дані. Вихідний файл CHAIN.SOL має містити L рядків, в кожному
з яких знаходиться результат обробри тесту. Коми та дужки (круглі та
прямокутні) мають бути розташовані суворо з відповідним записом ланцюгового
дробу, без символів пропуску.
   Технічні умови. Файл Вашої програми повинен мати назву CHAIN.*, де
розширення * залежить від мови програмування.

Приклади введення і виведення
┌───────────┬───────────────┐
│ CHAIN.DAT │   CHAIN.SOL   │
├───────────┼───────────────┤
│ 3         │ (2[,1,1,1,4]) │
│ 7         │ (6)           │
│ 36        │ (2[,4])       │
│ 5         │               │
└───────────┴───────────────┘

   2 тур.
   
   Перевірка слів.
   Розглянемо такі елементарні перетворення слів, записаних малими
латинськими літерами:
1. Заміна будь-якої літери на будь-яку іншу, наприклад test -> text;
2. Вилучення будь-якої літери, наприклад text -> ext, або text -> txt;
3. Вставка будь-якої літери на початок, в середину або в кінець,
   наприклад each -> peach, bat -> boat, або test -> tests;
4. Взаємна  перстановка двох сусідніх літер, наприклад cat -> act.

   Визначимо відстань між двома словами як мінімальну кількість названих
елементарних перетворень, яку треба зробити над одним з слів, щоб
отримати інше.    
   Завдання. Задано два файла - текст та словник. Напишіть програму, яка
для кожного слова тексту визначить всі слова зі словника, які знаходяться
від цього слова на найменшій відстані.
   Вхідні дані. Текст міститься в текстовому ASCII-файлі TEXT.DAT, кожен
рядок якого має довжину не більше ніж 80 символів і може містити кілька слів.
Сусідні слова в рядку відокремлено пропуском. Знаків пунктуації (крапок, ком,
тощо) немає.
   Словник міститься в текстовому ASCII-файлі LEX.DAT, кожен рядок якого
містить кількість слів (вона не перевищує 4000), а кожен наступний рядок
містить окреме слово довжиною не більше ніж 20 символів. Слова впорядковано
за алфавітом.
   Вихідні дані. Результат треба вивести до текстового ASCII-файлу NEAREST.SOL
з такою структурою. Для кожного слова з TEXT.DAT треба вивести в окремому рядку
мінімальну відстань до слів LEX.DAT, в наступному рядку - кількість найближчих
слів з LEX.DAT, а далі - всі найближчі слова з LEX.DAT в окремих рядках в
алфавітному порядку. Відповіді для слів з TEXT.DAT треба виводити послідовно 
згідно з порядком слів у тексті, не відокремлюючи їх порожніми рядками.
   Технічні умови. Ваша програма повина мати назву NEAREST.*, де розширення * 
залежить від мови програмування.

Приклад введення і виведення
┌─────────────────────────┬─────────────┬───────────────┐
│        TEXT.DAT         │   LEX.DAT   │ NEARTEST.SAOL │
├─────────────────────────┼─────────────┼───────────────┤
│ the quick brown fox     │ 12          │ 0             │
│ jumps over the lazy dog │ box         │ 1             │
│                         │ crazy       │ the           │
│                         │ crown       │ 3             │
│                         │ god         │ 1             │
│                         │ grow        │ queen         │
│                         │ jump        │ 1             │
│                         │ overflow    │ 1             │
│                         │ overlap     │ crown         │
│                         │ overload    │ 1             │
│                         │ ox          │ 2             │
│                         │ queen       │ box           │
│                         │ the         │ ox            │
│                         │             │ 1             │
│                         │             │ 1             │
│                         │             │ jump          │
│                         │             │ 3             │
│                         │             │ 3             │
│                         │             │ overlap       │
│                         │             │ ox            │
│                         │             │ the           │
│                         │             │ 0             │
│                         │             │ 1             │
│                         │             │ the           │
│                         │             │ 2             │
│                         │             │ 1             │
│                         │             │ crazy         │
│                         │             │ 2             │
│                         │             │ 3             │
│                         │             │ box           │
│                         │             │ god           │
│                         │             │ ox            │
└─────────────────────────┴─────────────┴───────────────┘

