
         ВСЕУКРАЇНСЬКА ОЛІМПІАДА З ІНФОРМАТИКИ

                    1 тур, 25 березня 1994 року.

1. ВЗАЄМНИЙ ЗАЛІК БОРГІВ (20 балів).
     З-за економічної кризи багато  підприємств  не  можуть  отримати
борги від  покупців і розрахуватися з продавцями за свої борги.  Банк
має намір зменшити загальний борг своїх клієнтів,  виконавши взаємний
залік боргів.  Для цього банк може змінювати борги клієнтів будь-яким
чином при умові,  що для кожного клієнта лишиться незмінним сальдо  -
різниця між сумою боргів йому та сумою його боргів.
     ЗАВДАННЯ: написати програму,  що перерахує заданий список боргів
в такий, що має якомога меншу загальну суму боргів.
                           ТЕХНІЧНІ УМОВИ:
     1. Ваша  програма  повинна  прочитати  вхідні дані для декількох
тестів з одного текстового ASCII-файлу  DEBTS.DAT.  Дані  для  різних
тестів відокремлено порожнім рядком. Кожен рядок файлу відповідає од-
ному борговому зобов'язанню та містить  3  натуральних  числа:  номер
боржника, номер підприємства, якому він винен, та суму боргу. Сусідні
числа відокремлено пропуском.
     2. Ваша  програма повинна записати результати для всіх тестів до
одного тестового  ASCII-файлу  DEBTS.SOL,  відокремлюючи   результати
різних тестів  порожнім  рядком.  Результат кожного тесту має містити
список боргів, що залишаться після взаємних заліків. Цей список пови-
нен мати таку ж структуру,  що й вхідний. За ним треба вивести список
сальдо всіх клієнтів,  що були боржниками або мали  боржників.  Кожен
рядок цього списку містить номер підприємства та його сальдо,  відок-
ремлені пропуском.  В кінці результатів тесту треба в окремому  рядку
вивести загальну суму боргів.
     3. Кількість підприємств не перевищує 100, грошові суми не пере-
вищують 30000 одиниць.
     4. Ім'я файлу з вихідним текстом програми - DEBTS*.
                               ПРИКЛАД
     Вхідні дані (файл DEBTS.DAT):
     1  2  100
     2  3  50
     3  1  75

     1  2  15
     2  3  11
     4  1  14

     Вихідні дані (файл DEBTS.SOL) повинні виглядати так:
     1  2  25
     3  2  25
     1  -25
     2  50
     3  -25
     50

     1  2  1
     4  2  4
     4  3  11
     1  -1
     2  4
     3  11
     4  -14
     15

2. ПОРІВНЯННЯ КОМПОСТЕРІВ (20 балів)
     Компостер в автобусі робить у квитку отвори, що містяться у дея-
ких вузлах квадратної сітки розміром M*N  вузлів.  Компостери  вважа-
ються однаковими,  якщо  всі  зроблені  ними  отвори  в квитках можна
сумістити, відобразивши один квиток на інший комбінацією  паралельних
переносів, поворотів  на прямий кут та симетрій відносно горизонталь-
ної та вертикальної осей.  Закомпостований квиток має принаймні  один
отвір.
     ЗАВДАННЯ: Написати програму, що визначить, чи однакові два зада-
них компостери.
                           ТЕХНІЧНІ УМОВИ:
     1. Ваша  програма  повинна  прочитати  вхідні дані для декількох
тестів з одного текстового ASCII-файлу COMPOST2.DAT.  Дані для різних
компостерів відокремлено   порожнім   рядком.   Кожен   рядок   файлу
відповідає одному рядкові компостера та містить одиниці  (отвори)  та
нулі (вузли без отворів). Сусідні числа відокремлено пропуском.
     2. Ваша програма повинна записати результати для всіх тестів  до
одного текстового ASCII-файлу COMPOST2.SOL. Результат кожного тесту -
рядок з його порядковим номером та словом "Однакові" або "Різні".
     3. Розміри сітки не перевищують 15 вузлів.
     4. Ім'я файлу з вихідним текстом програм - COMPOST2.*
                               ПРИКЛАД
     Вхідні дані (файл COMPST2.DAT):
     0  0  0 {перший тест, перший компостер}
     0  0  1
     0  0  0

     0  1  0  0 {перший тест, другий компостер}
     0  0  0  0 {хоч він і має інший розмір, ніж перший}
     0  0  0  0 {але вважається однаковим з ним}

     1  0  0  0  0  0 {другий тест, перший компостер}
     0  0  0  0  0  0
     0  0  0  0  0  0
     0  0  0  0  1  0

     1  0  0  0  0  1 {другий тест, другий компостер}
     0  0  0  0  0  0
     0  0  0  0  0  0
     0  0  0  0  0  0
     Вихідні дані (файл COMPST2.SOL) повинен виглядати так:
     1. Однакові
     2. Різні

3. КІЛЬКІСТЬ КОМПОСТЕРІВ (60 балів)
     ЗАВДАННЯ: Написати програму,  що за умов попередньої задачі виз-
начить кількість різних компостерів,  які  можна  утворити  на  сітці
розміром M*N вузлів.
                           ТЕХНІЧНІ УМОВИ:
     1. Ваша  програма  повинна  прчитати  вхідні  дані для декількох
тестів з одного текстового ASCII-файлу COMPOST3.DAT. Кожен рядок фай-
лу відповідає одному тесту та містить числа M та N, відокремлені про-
пуском.
     2. Ваша  програма повинна записати результати для всіх тестів до
одного текстового ASCII-файлу COMPOST3.SOL. Результат кожного тесту -
рядок з його порядковим номером та кількістю компостерів.
     3. M та N не перевищують 15.
     4. Ім'я файлу з вихідним текстом програми - COMPOST3.*
                               ПРИКЛАД
     Вхідні дані (файл COMPOST3.DAT):
     1  1
     2  2
     Вихідні дані (файл COMPOST3.SOL) повинні виглядати так:
     1  1
     2  5

                      2 тур, 26 березня 1994 р.

                              АРХІВАТОР
     1. Напишіть програму-архіватор,  що перетворює вхідний текстовий
файл у  вихідний (архівний) файл якомога меншого розміру,  та програ-
му-дезархіватор, що  відновлює  за  архівним  файлом  початковий  (50
балів).
     2. Напишіть програму-архіватор, що перетворює всі текстові файли
з іменами, відповідними масці "*.txt", що знаходяться в поточному ка-
талозі, в один вихідний (архівний) файл якомога меншого  розміру,  та
програму-дезархіватор, що  відновлює  за архівним файлом всі включені
до нього текстові файли (30 балів).
     3. З різних причин інформація в архівних файлах може спотворюва-
тися. Додайте до дезархіватора засоби,  що сповіщають  користувача  в
разі спотворення інформації в архівному файлі (20 балів).

                           ТЕХНІЧНІ УМОВИ
     1. Вхідні текстові файли можуть містити великі та малі українсь-
ки, російські та латинські літери,  цифри, крапки, коми, крапки з ко-
мами, двокрапки,  знаки питання  та  оклику,  тире,  подвійні  лапки,
круглі дужки,  пропуски, символи повернення каретки (десятковий код -
10) та переведення рядка (код 13).  Кожен файл завершується  символом
кінця файлу (код 26). Довжина рядків не перевищує 255 символів. Вико-
ристовуйте кодування українських літер згідно з наданим Вам драйвером.
     2. Архівний  файл повинен завершуватися символом кінця файлу;  в
середині архівного файлу цей символ міститися не може.
     3. Програми  повинні  запитувати  необхідні  імена  текстових та
архівних файлів в діалозі.
     4. Відкомпільовані  програми мають обробляти кожен набір текстів
не довше,  ніж за 5 хвилин;  програми, що інтерпретуються - не довше,
ніж за 10 хвилин.
     5. Імена файлів з вихідними текстами програм - ARC.* та UNARC.*


                     1 тур, 25 березня 1995 року

                             Завдання 1

     Задано множину з N натуральних чисел a[1], a[2], ...,a[N]. Знай-
ти множину різних номерів b[1],  b[2],  ..., b[K] (1 <= K <= N) таку,
щоб число   a[b[1]] + a[b2]] + ... + a[bK]]  ділилось без остачі на N.

                           Технічні умови
     1. Імена   файлів   програми,   вхідних   та   вихідних   даних:
SEQUENCE.???, SEQUENCE.DAT,  SEQUENCE.SOL,  де ??? - PAS, BAS, C, CPP
(в залежності від мови програмування).
     2. Перший рядок вхідного файлу містить кількість тестів.  Перший
рядок кожного тесту містить кількість чисел N (  1  <=  N  <=  45  ).
Наступні N  рядків містять натуральні числа a[1],  a[2],  ...,  a[N].
Гарантовано, що їх сума не виходить за межі стандартних цілочисельних
типів.
     3. Коректність вхідних даних гарантується.
     4. У вихідний файл для кожного тесту в один рядок вивести множи-
ну номерів b[1],  ..., b[K], відокремивши їх пропусками, або повідом-
леннями "No solution".

                Приклад вхідного та вихідного файлів
     Вхідний (SEQUENCE.DAT):
     2
     1
     1
     3
     1
     2
     3

     Ds[blysq (SEQUENCE.SOL):
     1
     1 2 3

                             Завдання 2

     Написати програму  для  знаходження  такого рядка з 75 символів,
кожен з яких може набувати значення "A",  "B" або "C", щоб ніякі його
два сусідні підрядка не співпадали.  Наприклад,  в рядку з 7 символів
"ABACBAB" не має сусідніх однакових підрядків, а в рядках  "ABAACAB",
"CABABCA", "CABCABA", "BACBCBBA" є.

                           Технічні умови
     1. Імена файлів програми та вихідних даних: ABC.???, ABC.SOL, де
??? - PAS, BAS, C, CPP (в залежності від мови програмування).
     2. У вихідній файл вивести  розв'язок  задачі  або  повідомлення
"No solution", якщо такого рядка не існує.


                             Завдання 3

     За заданими натуральними числами
            P (0 < P < 10000) та N (0  <  N < 1000)
обчислити значення P (кореня квадратного з числа P) з N точними  циф-
рами пічля коми.

                           Технічні умови
     1. Імена файлів програми, вхідних та вихідних даних: SQROOT.???,
SQROOT.DAT, SQROOT.SOL, де ??? - PAS,BAS,C,CPP (в залежності від мови
програмування).
     2. Перший  рядок вхідного файлу містить кількість тестів m,n на-
борів тестових даних,  кожен з яких складається з  двох  рядків,  які
містять числа P та N відповідно.
     3. Коректність вхідних даних гарантується.
     4. У  вихідний  файл вивести розв'язки всіх тестів,  по одному в
рядок. Числа повинні бути надані у вигляді десяткових дробів.

                Приклад вхідного та вихідного файлів
     Вхідний (SQROOT.DAT):
     3
     2
     5
     10
     10
     100
     30

     Вихідний (SQROOT.SOL):
     1.41421
     3.1622776601
     10.0000000000000000000000000000000000

                       2 туp, 26 березня 1995 року.
                               Завдання 1.
     Вибір складається з N деталей.  Є N верстатів, на кожному з яких
можна виготовити  будь-яку  деталь.  Для  кожних  верстату та деталей
відомий час t[i,k] виготовлення k-ї деталі на i-му верстаті. Напишіть
програму, яка визначить,  на якому верстаті слід виготовити кожну де-
таль, щоб одночасно почавши виготовляти всі деталі,  завершити  виго-
товлення всмх деталей якнайшвидше.

                           Технічні умови.
     1) Імена   файлів   програми,   вхідних   та   вихідних   даних:
DETAILS.???, DETAILS.DAT,  DETAILS.SOL,  де ??? - PAS, BAS, C, CPP (в
залежності від мови програмування).
     2) Перший рядок вхідного файлу містить кількість текстів. Перший
рядок кожного  тексту  містить   кількість   верстатів   та   деталей
N(1<=N<=50). Кожен  з  наступних N рядків містить тривалості виготов-
лення деталей на  відповідному  верстаті  t[i,1],  t[i,2],...,t[i,N],
відокремлені комами. Кожне з цих чисел натуральне і не перевершує 100.
     3) Коректність вхідних даних гарантується.
     4) У  вихідний файл для кожного тесту треба послідовно вивести в
один рядок.  Номери деталей, які треба виготовити відповідно на 1-му,
2-му,..., N-му верстатах, відокремивши їх пропусками. В наступний ря-
док треба вивести час від початку до завершення виготовлення всіх де-
талей.
     5) Для кожного тесту досить знайти один розв`язок.

     Приклад вхідного та вихідного файлів
     Вхідний(DETAILS.DAT):
     2
     2
     3,2
     1,2
     3
     3,3,3
     3,3,3
     3,3,3

     Вихідний  (DETAILS.SOL):
     2 1
     2
     1 2 3
